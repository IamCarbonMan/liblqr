
LiquidRescale library
=====================

Table of contents
-----------------
  * Introduction
    + Seam carving in brief
    + Library features
  * Installation
    + Requirements
    + Normal setup
  * Using the library
  * Additional notes
    + About the carving information
    + About rescaling in both directions
    + About enlarging
  * References
  * Copyright


+ Introduction
--------------

The LiquidRescale (lqr) library provides a C/C++ API for
performing non-uniform resizing of images by the seam-carving
technique.

++ Seam carving in brief

Basically, an algorithm tries to find out which parts
of the image are important, and which are not; then, the image
is resized through the elimination or insertion of continuous
paths, called `seams'. The seams connect the top of the image
with the bottom when rescaling horizontally, or they connect
the left side with the right side when rescaling vertically.
In the seam carving process, seams are removed in sequence.
The seam insertion process mirrors the seam carving process,
introducing interpolated seams in regions where they would have
been carved.
See the sections "Additional notes" and "References" for more
information.

++ Library features

The library takes images in plain array format as input
and converts them to a multi-size representation.
Following is a list of features:

  * Easy to use API
  * Areas in the image can be marked for preservation or
    discard
  * Once the image has been fully processed, the scaling can
    be done in real-time. In fact, the information can be saved
    and read out later without any further processing
  * The resizing is done with a single function which
    automatically performs all the necessary operations; it
    can also work in successive steps without wasting
    computational time
  * Possibility to tune the carving operation by letting the
    seams be less connected, or more rigid, or both 
  * Can export and import the visibility map (the seams)
  * Other images can be attached and undergo the same carving
    process as the parent image 
  * The automatic feature detection algorithm can be tuned
    by selecting among different energy gradient functions
  * Reports progress through a customizable interface
  * A signalling system permits to cleanly handle errors



+ Installation
--------------

++ Requirements

The lqr library requires the glib-2.0 libraries

++ Normal setup

The build package uses autotools and libtool, so the installation
commands on Unix systems are simply

./configure --prefix=/usr && make && sudo make install

The last step requires administrative privileges.
(If the dynamic linker path includes /usr/local/lib, the --prefix
option is not needed.)

See the INSTALL file for a full description.



+ Using the library
------------------------

In order to use the library functions and structures from
a C or C++ program, you have to add this include line in 
your program:

#include <lqr.h>

At compile time, you can take advantage of pkg-config to set
the proper flags.

In the `examples' directory you can find a basic example program,
`liquidrescale-basic', and a full-featured demo program,
`liquidrescale', toghether with a simple Makefile. Both
programs are fully commented.

The "basic" version demonstrates how to use the strictly-needed 
library functions, while the full version uses almost all of the
API methods provided. The Makefile shows how to set the compilation
flags.

See the README file in that directory for more information.

The complete description of the library functions can be found in
the manual.txt file under the `docs' directory.



+ Additional notes
------------------

++ About the carving information

When rescaling along a direction, the library only needs to compute
the operations once, because it stores the information internally in
a "visibility map". This information can be read out and used at a
later time. Note, however, that this is no longer possible when rescaling
in both directions at a time, see below.
See also the demo program in the examples directory for an
interface example, and the manual for more details.

++ About rescaling in both directions

Rescaling can be done both horizontally and vertically.
However, when resizing in both directions at the same time,
multiple choices are possible, because the order of the
rescale operations do matter: rescaling horizontally first,
then vertically, does not yield the same result as following
the reverse order. Moreover, one could choose an intermediate
way, e.g. by rescaling by one pixel in one direction, one 
in the other, then iterating as needed to reach the final size.

As a consequence of this, real-time rescaling is only possible
when rescaling in a single direction at a time, because every
time that the rescaling direction is changed, the visibility
map has to be reset, since it would otherwise become inconsistent.

The default behavior of the library is to rescale horizontally
first, then vertically. This order can be reversed. See the
manual for more information.

++ About enlarging

As mentioneed above, the enlargment process mirrors the carving
process. More precisely, in order to enlarge the image by a given
amount of pixels, say N, the library first computes which would be
the first N seams to be removed; then, it inserts new seams
nearby those.

This means that it is clearly not possible to go beyond twice the
original size in a single step. It also means that doubling the
image size in this way is just equivalent to standard scaling, since
the result is that each seam is just duplicated. All in all, it is
not advisable to enlarge too much in a single step.

This same issue also affects the preservation of image areas when
enlarging in a tricky way: suppose your image is 1000 pixels wide,
and you have protected an area which is 800 pixels wide. It is then
clear that you cannot shrink the image to less than 800 pixels without
affecting the preserved area, but the same is true when enlarging,
so you should not go beyond 1200 pixels (= 1000 + (1000 - 800)).



+ References
------------

The library implements the algorithm described in the paper
"Seam Carving for Content-Aware Image Resizing"
by Shai Avidan and Ariel Shamir, which can be found at
http://www.faculty.idc.ac.il/arik/imret.pdf



+ Copyright
-----------

Copyright (C) 2007 Carlo Baldassi <carlobaldassi@yahoo.it>

